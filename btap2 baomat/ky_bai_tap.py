import hashlib
import hmac
import json
import datetime
import os
from PyPDF2 import PdfReader, PdfWriter
from reportlab.pdfgen import canvas
from io import BytesIO

# ----------------------------
# C·∫•u h√¨nh c∆° b·∫£n
# ----------------------------
INPUT_PDF = "bai_tap.pdf"
SIGNED_PDF = "bai_tap_signed.pdf"
SIG_FILE = "bai_tap.sig"
SECRET_KEY_FILE = "secret.key"
SIGNER_NAME = "Th·∫£o"
VISIBLE_TEXT = f"Ng∆∞·ªùi k√Ω: {SIGNER_NAME}"

# ----------------------------
# T·∫°o kh√≥a b√≠ m·∫≠t n·∫øu ch∆∞a c√≥
# ----------------------------
if not os.path.exists(SECRET_KEY_FILE):
    import secrets
    key = secrets.token_bytes(32)
    with open(SECRET_KEY_FILE, "wb") as f:
        f.write(key)
    print("üîë ƒê√£ t·∫°o kh√≥a b√≠ m·∫≠t m·ªõi (secret.key).")

# ----------------------------
# H√†m ti·ªán √≠ch
# ----------------------------
def load_secret_key():
    """ƒê·ªçc kh√≥a b√≠ m·∫≠t t·ª´ file"""
    with open(SECRET_KEY_FILE, "rb") as f:
        return f.read().strip()

def sha256_file(path):
    """T√≠nh hash SHA256 c·ªßa file"""
    h = hashlib.sha256()
    with open(path, "rb") as f:
        for chunk in iter(lambda: f.read(4096), b""):
            h.update(chunk)
    return h.hexdigest()

def hmac_sha256(key, message_hex):
    """T√≠nh HMAC-SHA256"""
    msg = message_hex.encode("utf-8")
    return hmac.new(key, msg, hashlib.sha256).hexdigest()

from reportlab.pdfbase import pdfmetrics
from reportlab.pdfbase.ttfonts import TTFont

def create_overlay(text, page_width, page_height):
    """T·∫°o l·ªõp ch·ªØ k√Ω hi·ªÉn th·ªã ·ªü cu·ªëi trang PDF (c√≥ h·ªó tr·ª£ Unicode)"""
    packet = BytesIO()
    c = canvas.Canvas(packet, pagesize=(page_width, page_height))

    # ƒêƒÉng k√Ω font Unicode (Arial ho·∫∑c DejaVuSans h·ªó tr·ª£ ti·∫øng Vi·ªát)
    font_path = "C:\\Windows\\Fonts\\arial.ttf"  # c√≥ s·∫µn tr√™n Windows
    pdfmetrics.registerFont(TTFont("ArialUnicode", font_path))
    c.setFont("ArialUnicode", 12)

    # Th√™m ch·ªØ k√Ω ·ªü cu·ªëi trang
    c.drawString(60, 40, text)
    c.save()
    packet.seek(0)
    return packet

# ----------------------------
# H√†m k√Ω PDF
# ----------------------------
def sign_pdf():
    if not os.path.exists(INPUT_PDF):
        print("‚ùå Kh√¥ng t√¨m th·∫•y file g·ªëc (bai_tap.pdf). H√£y t·∫°o tr∆∞·ªõc khi k√Ω.")
        return

    # 1. ƒê·ªçc kh√≥a v√† t√≠nh hash
    key = load_secret_key()
    file_hash = sha256_file(INPUT_PDF)
    signature_hmac = hmac_sha256(key, file_hash)

    # 2. ƒê·ªçc file PDF g·ªëc
    reader = PdfReader(INPUT_PDF)
    writer = PdfWriter()
    num_pages = len(reader.pages)

    # 3. T·∫°o overlay ch·ªØ k√Ω cho trang cu·ªëi
    last_page = reader.pages[-1]
    page_width = float(last_page.mediabox.width)
    page_height = float(last_page.mediabox.height)
    overlay_pdf = create_overlay(VISIBLE_TEXT, page_width, page_height)
    overlay_reader = PdfReader(overlay_pdf)
    overlay_page = overlay_reader.pages[0]

    # 4. Sao ch√©p c√°c trang v√† gh√©p ch·ªØ k√Ω v√†o trang cu·ªëi
    for i in range(num_pages - 1):
        writer.add_page(reader.pages[i])
    base_last = reader.pages[-1]
    base_last.merge_page(overlay_page)
    writer.add_page(base_last)

    # 5. Ghi PDF ƒë√£ k√Ω
    with open(SIGNED_PDF, "wb") as f_out:
        writer.write(f_out)

    # 6. T·∫°o file ch·ªØ k√Ω JSON
    sig_obj = {
        "signed_by": SIGNER_NAME,
        "timestamp": datetime.datetime.now().isoformat(),
        "sha256": file_hash,
        "hmac": signature_hmac
    }
    with open(SIG_FILE, "w", encoding="utf-8") as f:
        json.dump(sig_obj, f, ensure_ascii=False, indent=2)

    print("‚úÖ ƒê√£ k√Ω th√†nh c√¥ng!")
    print(f"PDF ƒë√£ k√Ω: {SIGNED_PDF}")
    print(f"T·ªáp ch·ªØ k√Ω: {SIG_FILE}")

# ----------------------------
# Ch·∫°y tr·ª±c ti·∫øp
# ----------------------------
if __name__ == "__main__":
    sign_pdf()
